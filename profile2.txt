Wrote profile results to lbp.py.lprof
Timer unit: 1e-06 s

Total time: 10.4368 s
File: lbp.py
Function: uniform_lbp2 at line 316

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   316                                           @profile
   317                                           def uniform_lbp2(im, radius, face_area, block_size):
   318                                           
   319                                               # only for 8 points neighbor
   320         1            6      6.0      0.0      point = 8
   321                                           
   322         1            2      2.0      0.0      min_height = face_area[0]
   323         1            1      1.0      0.0      max_height = face_area[1]
   324         1            1      1.0      0.0      min_width = face_area[2]
   325         1            2      2.0      0.0      max_width = face_area[3]
   326         1            1      1.0      0.0      block_height = block_size[0]
   327         1            1      1.0      0.0      block_width = block_size[1]
   328         1            4      4.0      0.0      block_total = ((max_height - min_width) / block_height) * ((max_width - min_width) / block_width)
   329         1            1      1.0      0.0      block = 0
   330                                           
   331         1            9      9.0      0.0      im_height = np.size(im, axis=0)
   332         1            3      3.0      0.0      im_width = np.size(im, axis=1)
   333                                           
   334                                               # uniform label for 8 points is 58. 1 bins for non uniform
   335         1            1      1.0      0.0      histogram_width = 59
   336         1         1823   1823.0      0.0      uniform_label = uniform_decimal()
   337                                               # initialize the histograms
   338         1           30     30.0      0.0      hists = np.empty(shape=(block_total, histogram_width))
   339                                           
   340         6            8      1.3      0.0      for i in range(min_height, max_height, block_height):
   341        25           38      1.5      0.0          for j in range(min_width, max_width, block_width):
   342                                           
   343        20           60      3.0      0.0              rows = range(i, i+block_height)
   344        20           50      2.5      0.0              cols = range(j, j+block_width)
   345                                           
   346        20           63      3.1      0.0              hist = np.zeros(histogram_width)
   347                                           
   348       820         1004      1.2      0.0              for k in rows:
   349     32800        36604      1.1      0.4                  for l in cols:
   350     32000        42488      1.3      0.4                      pixel = im[k, l]
   351     32000       561794     17.6      5.4                      neighbor_idx = circular_points2(k, l, radius, point)
   352                                           
   353     32000        99206      3.1      1.0                      neighbor_val = np.zeros(point)
   354                                           
   355    288000       353436      1.2      3.4                      for pos, idx in enumerate(neighbor_idx):
   356                                                                   # check if point is outside the image
   357    256000       394611      1.5      3.8                          if idx[0] < 0 or idx[1] < 0 or idx[0] >= im_height or idx[1] >= im_width:
   358                                                                       neighbor_val[pos] = 255
   359                                                                   # integer point, get exact pixel value
   360    256000       524369      2.0      5.0                          elif is_integer(idx[0]) and is_integer(idx[1]):
   361    128000       578190      4.5      5.5                              neighbor_val[pos] = im[idx]
   362                                                                   # require interpolation
   363                                                                   else:
   364    128000       139837      1.1      1.3                              x = idx[0]
   365    128000       134310      1.0      1.3                              y = idx[1]
   366                                           
   367                                                                       # get point for interpolation
   368                                                                       # if the point is integer, ceiling = point+1
   369    128000       161900      1.3      1.6                              point1 = (math.floor(x),
   370    128000       155569      1.2      1.5                                        math.floor(y))
   371    128000       144895      1.1      1.4                              point2 = (math.floor(x),
   372    128000       305809      2.4      2.9                                        integer_ceil2(y))
   373    128000       275980      2.2      2.6                              point3 = (integer_ceil2(x),
   374    128000       156079      1.2      1.5                                        math.floor(y))
   375    128000       427558      3.3      4.1                              point4 = (integer_ceil2(x), integer_ceil2(y))
   376                                           
   377    128000       210517      1.6      2.0                              n = [point1, point2, point3, point4]
   378                                           
   379                                                                       # check if all interpolated point is
   380                                                                       # outside the image
   381                                                                       # if yes, return -1 for value
   382    640000       703322      1.1      6.7                              for idx in n:
   383    512000       764822      1.5      7.3                                  if idx[0] < 0 or idx[1] < 0 or idx[0] >= im_height or idx[1] >= im_width:
   384                                                                               neighbor_val[pos] = 255
   385                                                                               break
   386                                           
   387    128000       214782      1.7      2.1                              if neighbor_val[pos] == 255:
   388                                                                           break
   389                                           
   390    128000       574417      4.5      5.5                              n = [(point1[0], point1[1], im[point1]),
   391    128000       525531      4.1      5.0                                   (point2[0], point2[1], im[point2]),
   392    128000       518134      4.0      5.0                                   (point3[0], point3[1], im[point3]),
   393    128000       555713      4.3      5.3                                   (point4[0], point4[1], im[point4])]
   394                                           
   395    128000       935313      7.3      9.0                              neighbor_val[pos] = bilinear_interpolation2(x, y, n)
   396                                           
   397     32000       136994      4.3      1.3                      is_larger_than = neighbor_val > pixel
   398    288000       560597      1.9      5.4                      bitstring = ''.join([str(int(bit)) for bit in is_larger_than])
   399     32000        57708      1.8      0.6                      dec_value = int(bitstring, 2)
   400                                           
   401                                                               # populate the histogram
   402                                                               # index function should return the index of the bin
   403                                                               # if the decimal is uniform
   404                                                               # otherwise it returns TypeError
   405     32000        36253      1.1      0.3                      try:
   406     32000        76049      2.4      0.7                          bins = uniform_label.index(dec_value)
   407     30572        64785      2.1      0.6                          hist[bins] += 1
   408      1428         2534      1.8      0.0                      except ValueError:
   409                                                                   # populate the 59 bin for non uniform
   410      1428         3129      2.2      0.0                          hist[58] += 1
   411                                           
   412        20          332     16.6      0.0              norm_hist = hist / sum(hist)
   413        20          122      6.1      0.0              hists[block, :] = norm_hist
   414        20           26      1.3      0.0              block += 1
   415                                           
   416         1            1      1.0      0.0      return hists

