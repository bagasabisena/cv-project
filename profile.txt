Wrote profile results to lbp.py.lprof
Timer unit: 1e-06 s

Total time: 398.696 s
File: lbp.py
Function: uniform_lbp at line 169

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   169                                           @profile
   170                                           def uniform_lbp(im, radius, face_area, block_size):
   171                                           
   172                                               # only for 8 points neighbor
   173         1            5      5.0      0.0      point = 8
   174                                           
   175         1            2      2.0      0.0      min_height = face_area[0]
   176         1            2      2.0      0.0      max_height = face_area[1]
   177         1            2      2.0      0.0      min_width = face_area[2]
   178         1            1      1.0      0.0      max_width = face_area[3]
   179         1            1      1.0      0.0      block_height = block_size[0]
   180         1            1      1.0      0.0      block_width = block_size[1]
   181         1            2      2.0      0.0      block_total = ((max_height - min_width) / block_height) * ((max_width - min_width) / block_width)
   182         1            1      1.0      0.0      block = 0
   183                                           
   184                                               # uniform label for 8 points is 58. 1 bins for non uniform
   185         1            1      1.0      0.0      histogram_width = 59
   186         1         1746   1746.0      0.0      uniform_label = uniform_decimal()
   187                                               # initialize the histograms
   188         1           48     48.0      0.0      hists = np.empty(shape=(block_total, histogram_width))
   189                                           
   190         6           14      2.3      0.0      for i in range(min_height, max_height, block_height):
   191        25           40      1.6      0.0          for j in range(min_width, max_width, block_width):
   192                                           
   193        20           68      3.4      0.0              rows = range(i, i+block_height)
   194        20           46      2.3      0.0              cols = range(j, j+block_width)
   195                                           
   196        20           96      4.8      0.0              hist = np.zeros(histogram_width)
   197                                           
   198       820          972      1.2      0.0              for k in rows:
   199     32800        44116      1.3      0.0                  for l in cols:
   200     32000        48597      1.5      0.0                      pixel = im[k, l]
   201     32000     11279993    352.5      2.8                      neighbor_idx = circular_points(k, l, radius, point)
   202                                           
   203     32000       166974      5.2      0.0                      neighbor_val = np.zeros(point)
   204                                           
   205    288000       473412      1.6      0.1                      for pos, idx in enumerate(neighbor_idx):
   206                                                                   # check if point is outside the image
   207    256000     19454438     76.0      4.9                          if idx[0] < 0 or idx[1] < 0 or idx[0] >= np.size(im, axis=0) or idx[1] >= np.size(im, axis=1):
   208                                                                       neighbor_val[pos] = 255
   209                                                                   # integer point, get exact pixel value
   210    256000     30608777    119.6      7.7                          elif is_integer(idx[0]) and is_integer(idx[1]):
   211    128000      1732982     13.5      0.4                              neighbor_val[pos] = im[idx]
   212                                                                   # require interpolation
   213                                                                   else:
   214    128000      1172239      9.2      0.3                              x = decimal.Decimal(idx[0])
   215    128000      1088810      8.5      0.3                              y = decimal.Decimal(idx[1])
   216                                           
   217                                                                       # get point for interpolation
   218                                                                       # if the point is integer, ceiling = point+1
   219    128000      4468763     34.9      1.1                              point1 = (decimal.Decimal(math.floor(x)),
   220    128000      3878470     30.3      1.0                                        decimal.Decimal(math.floor(y)))
   221    128000      3720677     29.1      0.9                              point2 = (decimal.Decimal(math.floor(x)),
   222    128000     15807536    123.5      4.0                                        integer_ceil(y))
   223    128000     15369191    120.1      3.9                              point3 = (integer_ceil(x),
   224    128000      3781639     29.5      0.9                                        decimal.Decimal(math.floor(y)))
   225    128000     30311847    236.8      7.6                              point4 = (integer_ceil(x), integer_ceil(y))
   226                                           
   227    128000       387512      3.0      0.1                              n = [point1, point2, point3, point4]
   228                                           
   229                                                                       # check if all interpolated point is
   230                                                                       # outside the image
   231                                                                       # if yes, return -1 for value
   232    640000       795669      1.2      0.2                              for idx in n:
   233    512000     37026415     72.3      9.3                                  if idx[0] < 0 or idx[1] < 0 or idx[0] >= np.size(im, axis=0) or idx[1] >= np.size(im, axis=1):
   234                                                                               neighbor_val[pos] = 255
   235                                                                               break
   236                                           
   237    128000       427498      3.3      0.1                              if neighbor_val[pos] == 255:
   238                                                                           break
   239                                           
   240    128000      5108301     39.9      1.3                              n = [(point1[0], point1[1], decimal.Decimal(im[point1])),
   241    128000      4253868     33.2      1.1                                   (point2[0], point2[1], decimal.Decimal(im[point2])),
   242    128000      4099783     32.0      1.0                                   (point3[0], point3[1], decimal.Decimal(im[point3])),
   243    128000      4163281     32.5      1.0                                   (point4[0], point4[1], decimal.Decimal(im[point4]))]
   244                                           
   245    128000    197487691   1542.9     49.5                              neighbor_val[pos] = bilinear_interpolation(x, y, n)
   246                                           
   247     32000       401353     12.5      0.1                      is_larger_than = neighbor_val > pixel
   248    288000       779964      2.7      0.2                      bitstring = ''.join([str(int(bit)) for bit in is_larger_than])
   249     32000        69863      2.2      0.0                      dec_value = int(bitstring, 2)
   250                                           
   251                                                               # populate the histogram
   252                                                               # index function should return the index of the bin
   253                                                               # if the decimal is uniform
   254                                                               # otherwise it returns TypeError
   255     32000        34578      1.1      0.0                      try:
   256     32000       122795      3.8      0.0                          bins = uniform_label.index(dec_value)
   257     28794       106693      3.7      0.0                          hist[bins] += 1
   258      3206         5924      1.8      0.0                      except ValueError:
   259                                                                   # populate the 59 bin for non uniform
   260      3206        12450      3.9      0.0                          hist[58] += 1
   261                                           
   262        20          315     15.8      0.0              norm_hist = hist / sum(hist)
   263        20          115      5.8      0.0              hists[block, :] = norm_hist
   264        20           26      1.3      0.0              block += 1
   265                                           
   266         1            1      1.0      0.0      return hists

